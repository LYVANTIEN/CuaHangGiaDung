@page "/"
@using TangyWeb_Client.Service.IService;
@using Tangy_Models;
@inject HttpClient http
@inject IProductService _productService
@using Blazorise
@using Blazorise.Bootstrap
<PageTitle>Gia Dụng Điện Tử</PageTitle>
<link href="css/app.css" rel="stylesheet" />
<style>


    .mt-50 {
        margin-top: 50px;
    }

    .mb-50 {
        margin-bottom: 50px;
    }



    .card {
        position: relative;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: #fff;
        background-clip: border-box;
        border: 1px solid rgba(0,0,0,.125);
        border-radius: .1875rem;
    }

    .card-img-actions {
        position: relative;
    }

    .card-body {
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        padding: 1.25rem;
        text-align: center;
    }

    .card-img {
        width: 350px;
    }

    .star {
        color: red;
    }

    .bg-cart {
        background-color: orange;
        color: #fff;
    }

        .bg-cart:hover {
            color: #fff;
        }

    .bg-buy {
        background-color: green;
        color: #fff;
        padding-right: 29px;
    }

        .bg-buy:hover {
            color: #fff;
        }

    a {
        text-decoration: none !important;
    }

    .search-container {
        display: flex;
        align-items: flex-end;
        justify-content: flex-end;

    }

    .search-input {
        padding: 10px;
        border: 2px solid #ccc;
        border-radius: 5px 0 0 5px;
        outline: none;
        padding-right: 68px;
    }

    .search-button {
        padding: 10px;
        background-color: #4caf50;
        color: #fff;
        border: 2px solid #4caf50;
        border-radius: 0 5px 5px 0;
        cursor: pointer;
        outline: none;
    }

        .search-button:hover {
            background-color: #45a049;
        }
</style>

@if (IsProcessing)
{
    <div style="position:fixed;top:50%;left:50%;margin-top:-50px;margin-left:-100px;">
        <img src="image/ajax-loader.gif" />
    </div>
}
else
{
@*    <img src="https://i.makeagif.com/media/10-11-2017/-UrPH4.gif"  style="width:100%; height:500px;"/>*@
  @*  <img src="https://bizweb.dktcdn.net/100/426/039/collections/bot-rau-cu.jpg?v=1655709689847=g" style="display: flex;
         margin: 0 23%;
         width: 50%;
         height: 362px;" />*@
  <TangyWeb_Client.Pages.Slider.SliderImg></TangyWeb_Client.Pages.Slider.SliderImg>
    <div class="container">
    <div class="row  pb-3 pt-3 backgroundWhite">
           @* <input type="text" @bind="searchQuery" />
            <button @onclick="PerformSearch">Tìm Kiếm</button>*@
            <div class="search-container">
                <input type="text" @bind="searchQuery" class="search-input" placeholder="Nhập từ khóa">
                <button @onclick="PerformSearch" class="search-button">Tìm kiếm</button>
            </div>

           
            @foreach (var category in Products.Select(u => u.Category.Name).Distinct())
            {
                <h4 class="mt-4 "><strong class="continuous-glow">@category</strong></h4>
              
                    <div class="container d-flex justify-content-center  mb-50">

                        <div class="row">
                        @if (Products != null)
                        {
                 @foreach (var product in Products?.Where(u => u.Category.Name == category) ?? Enumerable.Empty<ProductDTO>())
                {
                            <div class="col-md-3 mt-2" >
                                    <div class="card">
                                    <div class="card-body">
                                        <div class="card-img-actions">
                                            <img src="@product.ImageUrl" class="card-img img-fluid" width="96" height="350" alt="">
                                        </div>
                                    </div>
                                    <div class="card-body bg-light text-center">
                                        <div class="mb-2">
                                            <h6 class="font-weight-semibold mb-2">
                                                <a href="#" class="text-default mb-2" data-abc="true" style="color: #150e0e;">@product.Name</a>
                                            </h6>

                                            <a href="#" class="text-muted" data-abc="true">Thể Loại: @product.Category.Name</a>
                                        </div>

                                            <h3 class="font-weight-semibold price-product">
                                                @product.ProductPrices?.OrderBy(u => u.Price).FirstOrDefault()?.Price
                                                Vnđ
                                            </h3>
                                        <a href="/details/@product.Id" class="btn bg-success text-white hover-detail">Xem chi tiết</a>
                                    </div>
                                </div>




                            </div>
                }
                        }
                        else
                        {
                            <p>Không tìm thấy kết quả.</p>
                        }


                        </div>
                    </div>
            }

        </div>
    </div>



    <Footer></Footer>

    }
@code {
    public bool IsProcessing { get; set; } = false;
    public IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private string searchQuery;
  
    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsProcessing = true;
            Products = await _productService.GetAll();
        }
        catch (Exception ex)
        {
            // Xử lý ngoại lệ ở đây (ví dụ: ghi log, hiển thị thông báo lỗi)
            Console.WriteLine($"Lỗi trong quá trình tải dữ liệu: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
        }
    }
    private async Task PerformSearch()
    {
        try
        {
            IsProcessing = true;
            Products = await _productService.Search(searchQuery);
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error during search: {ex.Message}");
        }
        finally
        {
            IsProcessing = false;
        }
    }
       
}


